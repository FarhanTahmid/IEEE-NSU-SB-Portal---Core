import base64
from datetime import datetime
from email.mime.text import MIMEText
from googleapiclient.discovery import build

from system_administration.google_authorisation_handler import GoogleAuthorisationHandler
from users.models import Members
from .models import SystemErrors,adminUsers
import logging
from django.core.mail import send_mail
from django.conf import settings
from insb_port.settings import DEBUG

class ErrorHandling:
    
    logger=logging.getLogger(__name__)
    
    def saveSystemErrors(error_name,error_traceback):
        try:
            new_error=SystemErrors.objects.create(
                date_time=datetime.now(),
                error_name=error_name,
                error_traceback=error_traceback
            )
            new_error.save()
            if(DEBUG):
                pass
            else:
                ErrorHandling.email_devs_to_handle_errors(error_name=error_name,error_traceback=error_traceback)
        except:
            ErrorHandling.logger.error("An error occurred at {datetime}".format(datetime=datetime.now()), exc_info=True)
    
    def email_devs_to_handle_errors(error_name,error_traceback):
        
        try:
            subject="A new Bug has been Reported in the system!"
            text_body=f"""Hello Dev,\nLooks like your system has crashed into an error!
            \nError Time: {datetime.now()}\n
            \nError Name: {error_name}\n
            Error Traceback: {error_traceback}\n
            Please solve this bugs ASAP to smoothen the system experiene!\n\n"""
            footer="""This message was auto generated by IEEE NSU SB Portal System."""
            message=text_body+footer
            email_from=settings.EMAIL_HOST_USER
            recipient_list=[]
            # get all dev accounts
            all_dev_accounts=adminUsers.objects.all()
            for i in all_dev_accounts:
                recipient_list.append(i.email)
            send_mail(
                subject,message,email_from,recipient_list
            )
            return True
        except:
            return False
    
    def send_schedule_error_email(username, email_unique_id, subject, error):
        try:
            user = None
            recipient_list=[]

            try:
                user = Members.objects.get(ieee_id=username)
                recipient_list.append(user.email_nsu)
                recipient_list.append(user.email_personal)
            except:
                user = adminUsers.objects.get(username=username)
                recipient_list.append(user.email)

            text_body=f"""Hello {user.name},\nLooks like we could not send your scheduled email!
<br><br>Error Time: {datetime.now()}<br><br>
Please check your following scheduled email:<br><br>
<b>ID: {email_unique_id}</b><br>
Subject: {subject}<br>
Error: {error}<br><br>"""
            footer="""This message was auto generated by IEEE NSU SB Portal System."""
            mail_body=text_body+footer

            credentials = GoogleAuthorisationHandler.get_credentials()
            if not credentials:
                print("NOT OKx")
                return None

            service = build(settings.GOOGLE_MAIL_API_NAME, settings.GOOGLE_MAIL_API_VERSION, credentials=credentials)
            # print(settings.GOOGLE_MAIL_API_NAME, settings.GOOGLE_MAIL_API_VERSION, 'service created successfully')


            message=MIMEText(mail_body, 'html')
            message["From"] = "IEEE NSU SB Portal <ieeensusb.portal@gmail.com>"
            message["To"] = ','.join(recipient_list)
            message["Subject"] = "Error while sending your scheduled email"


            # encoded message
            encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
            
            create_message = {"raw": encoded_message}

            send_message = (
                service.users()
                .messages()
                .send(userId="me", body=create_message)
                .execute()
            )

            # print(f'Message Id: {send_message["id"]}')
            return True
        except Exception as e:
            # print(e)
            return False
        
                